name: CloudFlare优选IP + 华为云更新DNS

on:
  schedule:
    - cron: '0 */1 * * *' # 每小时执行一次
  workflow_dispatch:
    inputs:
      force_update:
        description: '强制更新（忽略IP变化检测）'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

jobs:
  update_dns:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      FULL_DOMAIN: ${{ secrets.FULL_DOMAIN }}
      HUAWEI_ACCESS_KEY: ${{ secrets.HUAWEI_ACCESS_KEY }}
      HUAWEI_SECRET_KEY: ${{ secrets.HUAWEI_SECRET_KEY }}
      HUAWEI_REGION: ${{ secrets.HUAWEI_REGION }}
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      TG_USER_ID: ${{ secrets.TG_USER_ID }}
      FORCE_UPDATE: ${{ inputs.force_update }}
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🔒 隐藏敏感信息
        run: |
          echo "::add-mask::${{ secrets.FULL_DOMAIN }}"
          echo "::add-mask::${{ secrets.HUAWEI_ACCESS_KEY }}"
          echo "::add-mask::${{ secrets.HUAWEI_SECRET_KEY }}"
          echo "::add-mask::${{ secrets.TG_BOT_TOKEN }}"
          echo "::add-mask::${{ secrets.TG_USER_ID }}"
          echo "✅ 敏感信息已隐藏"

      - name: 🐍 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 安装系统依赖 (Chromium)
        run: |
          echo "🔧 更新软件包列表..."
          sudo apt-get update -qq
          
          echo "📦 安装 Chromium 及依赖..."
          sudo apt-get install -y --no-install-recommends \
            chromium-browser \
            chromium-chromedriver \
            fonts-liberation \
            libasound2 \
            libatk-bridge2.0-0 \
            libatk1.0-0 \
            libcups2 \
            libdbus-1-3 \
            libdrm2 \
            libgbm1 \
            libgtk-3-0 \
            libnspr4 \
            libnss3 \
            libxcomposite1 \
            libxdamage1 \
            libxfixes3 \
            libxrandr2 \
            xdg-utils > /dev/null 2>&1
          
          echo "✅ Chromium 版本: $(chromium-browser --version)"

      - name: 📚 安装 Python 依赖
        run: |
          echo "📦 升级 pip..."
          python -m pip install --upgrade pip setuptools wheel -q
          
          echo "📦 安装依赖包..."
          pip install --no-cache-dir -q \
            requests>=2.31.0 \
            beautifulsoup4>=4.12.0 \
            requests-html>=0.10.0 \
            lxml>=4.9.0 \
            'lxml[html_clean]' \
            huaweicloudsdkcore>=3.1.0 \
            huaweicloudsdkdns>=3.1.0
          
          echo "✅ 依赖安装完成"

      - name: 🔧 配置 Chromium 环境
        run: |
          echo "PYPPETEER_CHROMIUM_REVISION=latest" >> $GITHUB_ENV
          echo "CHROMIUM_PATH=/usr/bin/chromium-browser" >> $GITHUB_ENV

      - name: ✅ 检查必需的环境变量
        id: check_env
        run: |
          ERROR=0
          
          if [ -z "$FULL_DOMAIN" ]; then
            echo "❌ FULL_DOMAIN 未设置"
            ERROR=1
          else
            echo "✅ FULL_DOMAIN: 已设置"
          fi
          
          if [ -z "$HUAWEI_ACCESS_KEY" ]; then
            echo "❌ HUAWEI_ACCESS_KEY 未设置"
            ERROR=1
          else
            echo "✅ HUAWEI_ACCESS_KEY: 已设置"
          fi
          
          if [ -z "$HUAWEI_SECRET_KEY" ]; then
            echo "❌ HUAWEI_SECRET_KEY 未设置"
            ERROR=1
          else
            echo "✅ HUAWEI_SECRET_KEY: 已设置"
          fi
          
          if [ -z "$HUAWEI_REGION" ]; then
            echo "⚠️  HUAWEI_REGION 未设置，使用默认值"
          else
            echo "✅ HUAWEI_REGION: ${HUAWEI_REGION}"
          fi
          
          if [ -z "$TG_BOT_TOKEN" ] || [ -z "$TG_USER_ID" ]; then
            echo "⚠️  Telegram 通知未配置"
          else
            echo "✅ Telegram 通知已配置"
          fi
          
          if [ $ERROR -eq 1 ]; then
            echo "❌ 环境变量检查失败"
            exit 1
          fi
          
          echo "✅ 环境变量检查通过"

      - name: 🚀 运行 DNS 更新脚本
        id: update_dns
        env:
          HIDE_DOMAIN: "true"  # 隐藏域名输出
        run: |
          echo "🚀 开始执行 DNS 更新..."
          echo "🕐 开始时间: $(date '+%Y-%m-%d %H:%M:%S')"
          echo ""
          
          # 运行脚本并捕获输出
          if python cloudflare_dns_updater.py 2>&1 | grep -v "$FULL_DOMAIN" || true; then
            if [ ${PIPESTATUS[0]} -eq 0 ]; then
              echo "update_status=success" >> $GITHUB_OUTPUT
              echo "✅ 脚本执行成功"
            else
              echo "update_status=failed" >> $GITHUB_OUTPUT
              echo "❌ 脚本执行失败"
              exit 1
            fi
          fi
          
          echo ""
          echo "🕐 结束时间: $(date '+%Y-%m-%d %H:%M:%S')"

      - name: 📊 生成执行摘要
        if: always()
        run: |
          echo "# 🎯 Cloudflare DNS 更新报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 基本信息" >> $GITHUB_STEP_SUMMARY
          echo "- **域名**: \`已配置\`" >> $GITHUB_STEP_SUMMARY
          echo "- **区域**: \`${HUAWEI_REGION:-ap-southeast-1}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **状态**: ${{ steps.update_dns.outputs.update_status == 'success' && '✅ 成功' || '❌ 失败' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **执行时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **触发方式**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **运行编号**: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f cloudflare_bestip.json ]; then
            echo "## 📄 更新统计" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # 统计 IP 数量（不显示具体域名）
            DEFAULT_V4=$(jq -r '.最优IP.默认 // [] | length' cloudflare_bestip.json 2>/dev/null || echo "0")
            DIANXIN_V4=$(jq -r '.最优IP.电信 // [] | length' cloudflare_bestip.json 2>/dev/null || echo "0")
            LIANTONG_V4=$(jq -r '.最优IP.联通 // [] | length' cloudflare_bestip.json 2>/dev/null || echo "0")
            YIDONG_V4=$(jq -r '.最优IP.移动 // [] | length' cloudflare_bestip.json 2>/dev/null || echo "0")
            IPV6=$(jq -r '.最优IP.IPv6 // [] | length' cloudflare_bestip.json 2>/dev/null || echo "0")
            
            echo "| 线路 | IPv4 数量 | IPv6 数量 |" >> $GITHUB_STEP_SUMMARY
            echo "|------|----------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| 默认 | ${DEFAULT_V4} | - |" >> $GITHUB_STEP_SUMMARY
            echo "| 电信 | ${DIANXIN_V4} | - |" >> $GITHUB_STEP_SUMMARY
            echo "| 联通 | ${LIANTONG_V4} | - |" >> $GITHUB_STEP_SUMMARY
            echo "| 移动 | ${YIDONG_V4} | - |" >> $GITHUB_STEP_SUMMARY
            echo "| IPv6 | - | ${IPV6} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "> 💡 详细 IP 列表请下载 Artifacts 查看" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📦 上传结果文件
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cloudflare-bestip-${{ github.run_number }}
          path: |
            cloudflare_bestip.json
            cloudflare_bestip.txt
          retention-days: 7
          if-no-files-found: warn

      - name: 💾 提交结果到仓库
        if: success()
        id: commit
        run: |
          echo "🔧 配置 Git..."
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          echo "📝 检查文件变化..."
          git add cloudflare_bestip.json cloudflare_bestip.txt
          
          if git diff --staged --quiet; then
            echo "ℹ️  没有文件变化，跳过提交"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "📊 文件已变化，准备提交..."
            
            TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
            # 不在提交消息中包含域名
            COMMIT_MSG="🤖 Update Cloudflare Best IP - ${TIMESTAMP} [skip ci]"
            
            git commit -m "$COMMIT_MSG"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "✅ 提交完成"
          fi

      - name: 🔄 拉取远程更新并推送
        if: success() && steps.commit.outputs.has_changes == 'true'
        run: |
          echo "🔄 拉取远程更新..."
          git pull --rebase origin ${{ github.ref_name }} || {
            echo "⚠️  拉取失败，尝试解决冲突..."
            git rebase --abort || true
            git pull --no-rebase origin ${{ github.ref_name }}
          }
          
          echo "⬆️  推送到远程仓库..."
          MAX_RETRIES=3
          RETRY=0
          
          while [ $RETRY -lt $MAX_RETRIES ]; do
            if git push origin ${{ github.ref_name }}; then
              echo "✅ 推送成功"
              exit 0
            else
              RETRY=$((RETRY+1))
              echo "⚠️  推送失败，重试 $RETRY/$MAX_RETRIES..."
              sleep 5
              git pull --rebase origin ${{ github.ref_name }} || true
            fi
          done
          
          echo "❌ 推送失败，已达到最大重试次数"
          exit 1

      - name: 🧹 清理临时文件
        if: always()
        run: |
          echo "🧹 清理 Chromium 临时文件..."
          rm -rf /tmp/.com.google.Chrome.* || true
          rm -rf /tmp/pyppeteer-* || true
          rm -rf ~/.pyppeteer || true
          echo "✅ 清理完成"

      - name: 📱 失败通知
        if: failure()
        run: |
          if [ -n "$TG_BOT_TOKEN" ] && [ -n "$TG_USER_ID" ]; then
            TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
            MESSAGE="🚨 <b>DNS 更新失败</b>%0A%0A"
            MESSAGE="${MESSAGE}🕐 时间: ${TIMESTAMP}%0A"
            MESSAGE="${MESSAGE}🔗 日志: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}%0A%0A"
            MESSAGE="${MESSAGE}请检查 GitHub Actions 日志！"
            
            curl -s -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
              -d "chat_id=${TG_USER_ID}" \
              -d "text=${MESSAGE}" \
              -d "parse_mode=HTML" \
              -d "disable_web_page_preview=true" > /dev/null 2>&1 || echo "⚠️  Telegram 通知发送失败"
          fi
