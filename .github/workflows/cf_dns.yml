name: CloudFlare优选IP + 华为云更新DNS

on:
  schedule:
    - cron: '0 */1 * * *'
  workflow_dispatch:
    inputs:
      force_update:
        description: '强制更新'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

jobs:
  update_dns:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      FULL_DOMAIN: ${{ secrets.FULL_DOMAIN }}
      HUAWEI_ACCESS_KEY: ${{ secrets.HUAWEI_ACCESS_KEY }}
      HUAWEI_SECRET_KEY: ${{ secrets.HUAWEI_SECRET_KEY }}
      HUAWEI_REGION: ${{ secrets.HUAWEI_REGION }}
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      TG_USER_ID: ${{ secrets.TG_USER_ID }}
      FORCE_UPDATE: ${{ inputs.force_update }}
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔒 隐藏敏感信息
        run: |
          echo "::add-mask::${{ secrets.FULL_DOMAIN }}"
          echo "::add-mask::${{ secrets.HUAWEI_ACCESS_KEY }}"
          echo "::add-mask::${{ secrets.HUAWEI_SECRET_KEY }}"
          echo "::add-mask::${{ secrets.TG_BOT_TOKEN }}"
          echo "::add-mask::${{ secrets.TG_USER_ID }}"

      - name: 🐍 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'
        continue-on-error: true

      - name: 🌐 配置浏览器环境（智能检测）
        run: |
          echo "🔍 检查可用的浏览器..."
          
          # 优先使用预装的浏览器
          if command -v google-chrome &> /dev/null; then
            echo "✅ 使用预装 Chrome"
            echo "PYPPETEER_EXECUTABLE_PATH=$(which google-chrome)" >> $GITHUB_ENV
            google-chrome --version
          elif command -v chromium-browser &> /dev/null; then
            echo "✅ 使用预装 Chromium"
            echo "PYPPETEER_EXECUTABLE_PATH=$(which chromium-browser)" >> $GITHUB_ENV
            chromium-browser --version
          elif command -v chromium &> /dev/null; then
            echo "✅ 使用系统 Chromium"
            echo "PYPPETEER_EXECUTABLE_PATH=$(which chromium)" >> $GITHUB_ENV
            chromium --version
          else
            echo "⚠️  未找到预装浏览器，开始安装..."
            sudo apt-get update -qq
            
            # 尝试安装
            if sudo apt-get install -y chromium-browser 2>/dev/null; then
              echo "✅ Chromium 安装成功"
              echo "PYPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser" >> $GITHUB_ENV
            elif sudo snap install chromium 2>/dev/null; then
              echo "✅ Chromium (Snap) 安装成功"
              echo "PYPPETEER_EXECUTABLE_PATH=/snap/bin/chromium" >> $GITHUB_ENV
            else
              echo "❌ 浏览器安装失败"
              exit 1
            fi
          fi
          
          echo "PYPPETEER_CHROMIUM_REVISION=latest" >> $GITHUB_ENV

      - name: 📚 安装 Python 依赖
        run: |
          python -m pip install --upgrade pip -q
          
          if [ -f requirements.txt ]; then
            echo "📦 从 requirements.txt 安装..."
            pip install -r requirements.txt -q
          else
            echo "📦 直接安装依赖..."
            pip install -q \
              requests \
              beautifulsoup4 \
              requests-html \
              lxml \
              huaweicloudsdkcore \
              huaweicloudsdkdns
          fi
          
          echo "✅ 依赖安装完成"
          pip list | grep -E "requests|beautifulsoup4|lxml|huawei"

      - name: ✅ 检查环境变量
        run: |
          [ -z "$FULL_DOMAIN" ] && echo "❌ FULL_DOMAIN 未设置" && exit 1
          [ -z "$HUAWEI_ACCESS_KEY" ] && echo "❌ HUAWEI_ACCESS_KEY 未设置" && exit 1
          [ -z "$HUAWEI_SECRET_KEY" ] && echo "❌ HUAWEI_SECRET_KEY 未设置" && exit 1
          echo "✅ 必需环境变量已配置"

      - name: 🚀 运行 DNS 更新脚本
        id: update_dns
        env:
          HIDE_DOMAIN: "true"
          PYPPETEER_LOG_LEVEL: ERROR  # 减少 pyppeteer 日志
        run: |
          echo "🚀 开始执行 DNS 更新..."
          echo "📋 配置信息："
          echo "  - Python: $(python --version)"
          echo "  - 浏览器: $PYPPETEER_EXECUTABLE_PATH"
          echo "  - 区域: ${HUAWEI_REGION:-ap-southeast-1}"
          echo ""
          
          # 运行脚本（不过滤域名，用于调试）
          if python cloudflare_dns_updater.py; then
            echo "update_status=success" >> $GITHUB_OUTPUT
            echo "✅ 脚本执行成功"
          else
            EXIT_CODE=$?
            echo "update_status=failed" >> $GITHUB_OUTPUT
            echo "❌ 脚本执行失败 (退出码: $EXIT_CODE)"
            exit $EXIT_CODE
          fi

      - name: 📊 生成执行摘要
        if: always()
        run: |
          echo "# 🎯 DNS 更新报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **状态**: ${{ steps.update_dns.outputs.update_status == 'success' && '✅ 成功' || '❌ 失败' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **时间**: $(date -u '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **运行**: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -f cloudflare_bestip.json ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 📊 IP 统计" >> $GITHUB_STEP_SUMMARY
            
            for line in 默认 电信 联通 移动 IPv6; do
              count=$(jq -r ".最优IP.${line} // [] | length" cloudflare_bestip.json 2>/dev/null || echo "0")
              echo "- **${line}**: ${count} 个" >> $GITHUB_STEP_SUMMARY
            done
          fi

      - name: 📦 上传结果
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cloudflare-bestip-${{ github.run_number }}
          path: |
            cloudflare_bestip.json
            cloudflare_bestip.txt
          retention-days: 7
          if-no-files-found: warn

      - name: 💾 提交结果
        if: success()
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add cloudflare_bestip.json cloudflare_bestip.txt 2>/dev/null || true
          
          if ! git diff --staged --quiet 2>/dev/null; then
            git commit -m "🤖 Update $(date -u '+%Y-%m-%d %H:%M UTC') [skip ci]"
            git pull --rebase origin ${{ github.ref_name }} || true
            git push origin ${{ github.ref_name }} || echo "推送失败或无变化"
          else
            echo "ℹ️  无变化"
          fi

      - name: 🧹 清理
        if: always()
        run: |
          rm -rf /tmp/.com.google.Chrome.* /tmp/pyppeteer-* ~/.pyppeteer 2>/dev/null || true

      - name: 📱 失败通知
        if: failure()
        run: |
          if [ -n "$TG_BOT_TOKEN" ] && [ -n "$TG_USER_ID" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
              -d chat_id="${TG_USER_ID}" \
              -d parse_mode=HTML \
              -d text="🚨 <b>DNS更新失败</b>%0A%0A时间: $(date)%0A日志: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
              > /dev/null 2>&1 || true
          fi
